---
const currentPath = Astro.url.pathname;

const menuItems = [
  {
    title: 'Getting Started',
    icon: 'fas fa-rocket',
    items: [
      { title: 'Introduction', path: '/introduction' },
      { title: 'Getting Started', path: '/getting-started' }
    ]
  },
  {
    title: 'Frontend Development',
    icon: 'fas fa-desktop',
    items: [
      {
        title: 'Angular',
        icon: 'fab fa-angular',
        items: [
          {
            title: 'Fundamentals',
            items: [
              { title: 'Architecture Overview', path: '/angular/architecture' },
              { title: 'Components & Templates', path: '/angular/components-templates' },
              { title: 'Dependency Injection', path: '/angular/dependency-injection' }
            ]
          },
          {
            title: 'Advanced Concepts',
            items: [
              { title: 'Change Detection', path: '/angular/change-detection' },
              { title: 'Performance Optimization', path: '/angular/performance' },
              { title: 'Security Best Practices', path: '/angular/security' }
            ]
          },
          {
            title: 'State Management',
            items: [
              { title: 'NgRx Overview', path: '/angular/ngrx' },
              { title: 'RxJS Patterns', path: '/angular/rxjs-patterns' },
              { title: 'Services & State', path: '/angular/services-state' }
            ]
          }
        ]
      },
      {
        title: 'React',
        icon: 'fab fa-react',
        items: [
          {
            title: 'Core Concepts',
            items: [
              { title: 'Components & Props', path: '/react/components-props' },
              { title: 'Hooks in Depth', path: '/react/hooks' },
              { title: 'Context API', path: '/react/context-api' }
            ]
          },
          {
            title: 'Advanced Patterns',
            items: [
              { title: 'Performance Patterns', path: '/react/performance-patterns' },
              { title: 'Custom Hooks', path: '/react/custom-hooks' },
              { title: 'Error Boundaries', path: '/react/error-boundaries' }
            ]
          }
        ]
      }
    ]
  },
  {
    title: 'Backend Development',
    icon: 'fas fa-server',
    items: [
      {
        title: '.NET',
        icon: 'fas fa-cube',
        items: [
          {
            title: 'ASP.NET Core',
            items: [
              { title: 'Web API Design', path: '/dotnet/web-api' },
              { title: 'Middleware Pipeline', path: '/dotnet/middleware' },
              { title: 'Authentication & Authorization', path: '/dotnet/auth' }
            ]
          },
          {
            title: 'Data Access',
            items: [
              { title: 'Entity Framework Core', path: '/dotnet/ef-core' },
              { title: 'CQRS Pattern', path: '/dotnet/cqrs' },
              { title: 'Repository Pattern', path: '/dotnet/repository' }
            ]
          },
          {
            title: 'Architecture',
            items: [
              { title: 'Clean Architecture', path: '/dotnet/clean-architecture' },
              { title: 'Microservices', path: '/dotnet/microservices' },
              { title: 'Domain-Driven Design', path: '/dotnet/ddd' }
            ]
          }
        ]
      },
      {
        title: 'Node.js',
        icon: 'fab fa-node-js',
        items: [
          {
            title: 'Core Concepts',
            items: [
              { title: 'Event Loop', path: '/nodejs/event-loop' },
              { title: 'Streams & Buffers', path: '/nodejs/streams' },
              { title: 'Error Handling', path: '/nodejs/error-handling' }
            ]
          },
          {
            title: 'Database Integration',
            items: [
              { title: 'Prisma ORM', path: '/nodejs/prisma' },
              { title: 'MongoDB', path: '/nodejs/mongodb' },
              { title: 'SQL Databases', path: '/nodejs/sql' }
            ]
          }
        ]
      }
    ]
  },
  {
    title: 'DevOps & Deployment',
    icon: 'fas fa-cloud',
    items: [
      {
        title: 'CI/CD',
        items: [
          { title: 'GitHub Actions', path: '/devops/github-actions' },
          { title: 'Azure DevOps', path: '/devops/azure-devops' },
          { title: 'Docker', path: '/devops/docker' }
        ]
      }
    ]
  },
  {
    title: 'Testing',
    icon: 'fas fa-vial',
    items: [
      { title: 'Unit Testing', path: '/testing/unit-testing' },
      { title: 'Integration Testing', path: '/testing/integration-testing' },
      { title: 'E2E Testing', path: '/testing/e2e-testing' }
    ]
  }
];
---

<nav class="py-3 lg:py-4">
  {
    menuItems.map((section, index) => (
      <div class="mb-1.5 lg:mb-2">
        <button
          class="w-full flex items-center justify-between px-3 lg:px-4 py-2 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
          data-section={`section-${index}`}
        >
          <div class="flex items-center">
            <i class={`${section.icon} w-4 lg:w-5 h-4 lg:h-5 mr-2`} />
            <span class="font-medium text-sm lg:text-base">{section.title}</span>
          </div>
          <i class="fas fa-chevron-down transform transition-transform duration-200 text-sm lg:text-base" />
        </button>

        <div class="hidden pl-3 lg:pl-4 mt-1 lg:mt-2 space-y-0.5 lg:space-y-1" id={`section-${index}-content`}>
          {section.items?.map((item, subIndex) => (
            <>
              {'items' in item ? (
                <div class="mb-1.5 lg:mb-2">
                  <button
                    class="w-full flex items-center justify-between px-3 lg:px-4 py-1.5 lg:py-2 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
                    data-section={`section-${index}-${subIndex}`}
                  >
                    <div class="flex items-center">
                      {'icon' in item && item.icon && <i class={`${item.icon} w-3.5 lg:w-4 h-3.5 lg:h-4 mr-2`} />}
                      <span class="font-medium text-xs lg:text-sm">{item.title}</span>
                    </div>
                    <i class="fas fa-chevron-down transform transition-transform duration-200 text-xs lg:text-sm" />
                  </button>

                  <div class="hidden pl-3 lg:pl-4 mt-1 lg:mt-2 space-y-0.5 lg:space-y-1" id={`section-${index}-${subIndex}-content`}>
                    {item.items?.map((subItem, subSubIndex) => (
                      <>
                        {'items' in subItem ? (
                          <div class="mb-1.5 lg:mb-2">
                            <button
                              class="w-full flex items-center justify-between px-3 lg:px-4 py-1.5 lg:py-2 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
                              data-section={`section-${index}-${subIndex}-${subSubIndex}`}
                            >
                              <span class="font-medium text-xs lg:text-sm">{subItem.title}</span>
                              <i class="fas fa-chevron-down transform transition-transform duration-200 text-xs lg:text-sm" />
                            </button>

                            <div class="hidden pl-3 lg:pl-4 mt-1 lg:mt-2 space-y-0.5 lg:space-y-1" id={`section-${index}-${subIndex}-${subSubIndex}-content`}>
                              {subItem.items?.map((subSubItem) => (
                                <a
                                  href={subSubItem.path}
                                  class={`block px-3 lg:px-4 py-1.5 lg:py-2 rounded-lg text-xs lg:text-sm transition-colors duration-200 ${
                                    currentPath === subSubItem.path
                                      ? 'text-blue-600 dark:text-blue-500 bg-blue-50 dark:bg-blue-900/20'
                                      : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
                                  }`}
                                >
                                  {subSubItem.title}
                                </a>
                              ))}
                            </div>
                          </div>
                        ) : (
                          <a
                            href={subItem.path}
                            class={`block px-3 lg:px-4 py-1.5 lg:py-2 rounded-lg text-xs lg:text-sm transition-colors duration-200 ${
                              currentPath === subItem.path
                                ? 'text-blue-600 dark:text-blue-500 bg-blue-50 dark:bg-blue-900/20'
                                : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
                            }`}
                          >
                            {subItem.title}
                          </a>
                        )}
                      </>
                    ))}
                  </div>
                </div>
              ) : (
                <a
                  href={item.path}
                  class={`block px-3 lg:px-4 py-1.5 lg:py-2 rounded-lg text-xs lg:text-sm transition-colors duration-200 ${
                    currentPath === item.path
                      ? 'text-blue-600 dark:text-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
                  }`}
                >
                  {item.title}
                </a>
              )}
            </>
          ))}
        </div>
      </div>
    ))
  }
</nav>

<script>
  function initializeSidebar() {
    // Get all section buttons
    const sectionButtons = document.querySelectorAll('[data-section]');
    
    // Get current path
    const currentPath = window.location.pathname;
    
    sectionButtons.forEach((button) => {
      const sectionId = button.getAttribute('data-section');
      const content = document.getElementById(`${sectionId}-content`);
      const chevron = button.querySelector('.fa-chevron-down');
      
      // Check if any child link matches current path
      const hasActiveChild = content?.querySelector(`a[href="${currentPath}"]`);
      
      if (hasActiveChild) {
        // Expand all parent sections if there's an active child
        let parentContent = content;
        let parentButton = button;
        while (parentContent && parentButton) {
          parentContent.classList.remove('hidden');
          parentButton.querySelector('.fa-chevron-down')?.classList.add('rotate-180');
          parentButton = parentButton.parentElement?.closest('[data-section]') as Element;
          parentContent = parentButton?.nextElementSibling as HTMLElement;
        }
      }
      
      button.addEventListener('click', () => {
        // Toggle content visibility
        content?.classList.toggle('hidden');
        
        // Rotate chevron icon
        chevron?.classList.toggle('rotate-180');
      });
    });
  }

  // Initialize when the DOM is loaded
  document.addEventListener('DOMContentLoaded', initializeSidebar);
  
  // Initialize when document is loaded (for Astro view transitions)
  if (document.readyState === 'complete') {
    initializeSidebar();
  }
</script>
